version: 2.1
# orbs:
#   slack: circleci/slack@4.12.0

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    #parameters:
      # Add parameter here   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
            aws s3 rm s3://udapeople-<<parameters.Workflow_ID>> --recursive
            aws cloudformation delete-stack --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"
            
  revert-migrations:
    description: Revert your last migration
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            Check=$(curl --insecure  https://kvdb.io/${KVDB_BUCKET}/migration_${CIRCLE_WORKFLOW_ID:0:7})
            if (( $Check == 1 ));
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi



jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
          

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout  
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: front-end test
          command: |
            cd frontend
            npm install
            npm run test      
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout  
      - restore_cache:
          keys: [backend-build]
      - run:
          name: back-end test
          command: |
            cd backend
            npm install
            npm run test      

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout  
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: front-end scan
          command: |
            cd frontend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical      

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout  
      - restore_cache:
          keys: [backend-build]
      - run:
          name: back-end scan
          command: |
            cd backend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical 

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip

      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
               --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
               --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
              
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
               --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
               --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
              
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            IP_ADDRESS=$(aws ec2 describe-instances --filters "Name=tag:project,Values=udapeople" --query 'Reservations[].Instances[].PublicIpAddress' --output text)
            echo $IP_ADDRESS >> ./.circleci/ansible/inventory.txt

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt  # I think project should be removed

      - destroy-environment      

  configure-infrastructure:
    docker:
      - image: python:3.9-alpine3.16
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: 
            - "f2:19:8c:a3:0a:30:7d:ef:3d:80:89:bb:ca:0a:e1:d7" 
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --no-cache tar gzip
            pip install ansible awscli
            apk add openssh-client
              #alpine doesn't have ssh
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml

      - destroy-environment      
  
  run-migrations:       # ERORRS here comes from Database (make sure it's avilable and connect to it && make the jobs runs Sequentially )  and KVDB (refresh the bucket you created there)
    docker:
      - image: "cimg/node:13.8.0"
    steps:
      - checkout 
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Install dependencies
          command: |
            sudo apt-get update
            sudo apt-get install -y awscli
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to memstash
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
                # If you are using kvdb.io, generate the bucket ID "36fnMx215JkM5CQbjpMZ2T" in your local terminal first
                curl https://kvdb.io/${KVDB_BUCKET}/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
     # Here's where you will add some code to rollback on failure      
      - destroy-environment      
      - revert-migrations

  deploy-frontend:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout 
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            # install AWS CLI
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

            # install node js
            curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
            sudo apt install -y nodejs
            sudo npm install --global n
            sudo n 13.8.0

      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --filters "Name=tag:project,Values=udapeople" --query 'Reservations[].Instances[].PublicIpAddress' --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      # Here's where you will add some code to rollback on failure      
      - destroy-environment      
      - revert-migrations


  deploy-backend:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: 
            - "f2:19:8c:a3:0a:30:7d:ef:3d:80:89:bb:ca:0a:e1:d7" 
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [backend-build]          
      - run:
          name: Install dependencies
          command: |
            # install AWS CLI
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

            # install node js
            curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
            sudo apt install -y nodejs
            sudo npm install --global n
            sudo n 13.8.0

            # install Ansible
            sudo apt update
            sudo apt install software-properties-common -y
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible -y            
      - run:
          name: packging backend
          command: |
            cd backend
            npm install
            npm run build
            tar -czf artifact.tar.gz dist/* package*

            cd ..
            cp backend/artifact.tar.gz .circleci/ansible/roles/deploy/files

      - run:
          name: Deploy backend
          command: | 
            export TYPEORM_MIGRATIONS_DIR=./migrations
            export TYPEORM_ENTITIES=./modules/domain/**/*.entity{.ts,.js}
            export TYPEORM_MIGRATIONS=./migrations/*.ts
                                 
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
            
      # Here's where you will add some code to rollback on failure  
      - destroy-environment      
      - revert-migrations






############### .......... for Notification .......... ###################
  # notify:
  #   docker:
  #     - image: 'cimg/base:stable'
  #   steps:
  #     - run: return 1
  #     - slack/notify:
  #           event: fail
  #           custom: | 
  #             {
  #                 "blocks": [
  #                     {
  #                         "type": "section",
  #                         "text": {
  #                             "type": "mrkdwn",
  #                             "text": "Failed: $CIRCLE_USERNAME's build of \n<$CIRCLE_BUILD_URL|$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME>\n(<https://app.circleci.com/pipelines/github/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME?branch=$CIRCLE_BRANCH|$CIRCLE_BRANCH>) \n- <$CIRCLE_BUILD_URL|$CIRCLE_JOB> failed" 
  #                         }
  #                     }
  #                 ]
  #             }              

workflows:
  default:
    jobs:
    
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend] 
      - scan-backend:
          requires: [build-backend]
######## the above sequance is Okayyyy ######
 

      - deploy-infrastructure:   
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]   #should require all scan jobs to be done successfully
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]

      - deploy-frontend:
          requires: [run-migrations]

      - deploy-backend:
          requires: [run-migrations]


          


      # - notify:
      #     context: slack

